const request = require('request');
const { apiCovid19 } = require('./api/callApi');
const formatDate = require('./formatDate');
const covidModel = require('./models/covid19');
const usersModel = require('./models/users');

function handleMessage(sender_psid, received_message) {
    usersModel.findOne({ sender_psid }, function (err, user) {
        if (!user) usersModel.create({ sender_psid }, () => { })
    })
}

// Handles messaging_postbacks events
function handlePostback(sender_psid, received_postback) {
    let response;
    let payload = received_postback.payload;
    switch (payload) {
        case "get_started":
            usersModel.findOne({ sender_psid }, function (err, user) {
                if (!user) usersModel.create({ sender_psid }, (err) => {
                    let response = {
                        "text": `Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi BOT COVID-19 ü¶†ü¶†ü¶†\nH·ªá th·ªëng c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªói 5 ph√∫t. S·∫Ω th√¥ng b√°o cho b·∫°n n·∫øu c√≥ ca nhi·ªÖm m·ªõi.`
                    }
                    if (!err) callSendAPI(sender_psid, response);
                })
            })
            break;
        case "GET_COVID19":
            apiCovid19().then(res => {
                let date = new Date();
                covidModel.findOneAndUpdate({ id: process.env.PAGE_ACCESS_TOKEN }, { data: res, date }, (err) => {
                    if (!err) {
                        response = {
                            "text": `‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è TH√îNG B√ÅO T√åNH H√åNH D·ªäCH VI√äM PH·ªîI C·∫§P DO CH·ª¶NG M·ªöI C·ª¶A VIRUS CORONA ü¶†ü¶†ü¶†\n‚ûñ S·ªë ng∆∞·ªùi nhi·ªÖm: ${res.data.global.cases}\n‚ûñ T·ª≠ vong: ${res.data.global.deaths}\n‚ûñ B√¨nh ph·ª•c: ${res.data.global.recovered}`
                        }
                        callSendAPI(sender_psid, response);
                        setTimeout(function () {
                            response = {
                                "text": `S·ªë ca m·∫Øc COVID-19 t·∫°i Vi·ªát Nam c√≥ chi·ªÅu h∆∞·ªõng gia tƒÉng: \n‚ö†Ô∏è Nhi·ªÖm b·ªánh: ${res.data.vietnam.cases}\n‚ò†Ô∏è T·ª≠ vong: ${res.data.vietnam.deaths}\nüçÄ B√¨nh ph·ª•c: ${res.data.vietnam.recovered}\n\n‚è± C·∫≠p nh·∫≠t v√†o l√∫c: ${formatDate(date)}\n‚òëÔ∏è D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t m·ªói 5 ph√∫t.`
                            }
                            callSendAPI(sender_psid, response);
                        }, 800)
                        setTimeout(function () {
                            let top_country = "";
                            for (let index = 0; index < res.data.countries.length; index++) {
                                top_country += `\n‚ö†Ô∏è ${res.data.countries[index].c_name}: ${res.data.countries[index].c_cases} ( ${res.data.countries[index].c_deaths})`
                            }
                            response = {
                                "text": `M·ªôt s·ªë qu·ªëc gia kh√°c:\n(T√™n - Ca Nhi·ªÖm - S·ªë Ng∆∞·ªùi Ch·∫øt)${top_country}`
                            }
                            callSendAPI(sender_psid, response);
                        }, 1600)
                    }
                });
            })
            break;
        default:
            break;
    }
}

// Sends response messages via the Send API
function callSendAPI(sender_psid, response) {
    let request_body = {
        "recipient": {
            "id": sender_psid
        },
        "message": response
    }
    senderAction(sender_psid, "typing_on");
    setTimeout(() => {
        request({
            "uri": "https://graph.facebook.com/v2.6/me/messages",
            "qs": { "access_token": process.env.PAGE_ACCESS_TOKEN },
            "method": "POST",
            "json": request_body
        }, (err, res, body) => {
            if (!err) {
                console.log('message sent!')
            } else {
                console.error("Unable to send message:" + err);
            }
        });
        senderAction(sender_psid, "typing_off");
    }, 1000)
}

function senderAction(sender_psid, action) {
    let request_body = {
        "recipient": {
            "id": sender_psid
        },
        "sender_action": action
    }
    request({
        "uri": "https://graph.facebook.com/v2.6/me/messages",
        "qs": { "access_token": process.env.PAGE_ACCESS_TOKEN },
        "method": "POST",
        "json": request_body
    });
}

module.exports = { handleMessage, handlePostback, callSendAPI }